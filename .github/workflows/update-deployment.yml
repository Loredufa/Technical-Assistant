name: Update Deployment Image

on: #obligatorio para todos los workflows, indica que se activa cuando se hace un push a la rama main
  push:
    branches:
      - main  # Se activa cuando hay un push a la rama main

jobs: #indica los jobs que se van a ejecutar
  update-deployment: #nombre del job, puede ser cualquier nombre
    runs-on: ubuntu-latest  #indica que se va a ejecutar en un runner de ubuntu (se puede usar windows-latest, macos-latest) depende del sist operativo en el que estas trabajando.

    steps: #primer paso del jobs
      # Paso 1: Checkout del código
      - name: Checkout code #puede ser cualquier nombre
        uses: actions/checkout@v3 #uses:indica que este paso usa una acción de GitHub predefinida, actions/checkout: descarga el código fuente del repositorio,  @v3:indica que está usando la versión 3 de la acción.
        #Esto es lo mismo que hacer manualmente: git clone https://github.com/ldufaur/Technical-Assistant.git dentro de la imagen

      # Paso 2: Configurar la CLI de OpenShift (oc)
      - name: Install OpenShift CLI
        run: |
          curl -sSL https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz | tar -xz
          sudo mv oc /usr/local/bin/
      
      # Paso 3: Autenticarse en OpenShift
      - name: Login to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }}
      
      # Paso 4: Disparar un nuevo build y obtener el nombre de la nueva imagen
      - name: Trigger OpenShift Build and Get Image Name
        id: build
        run: |
          # Disparar el build
          oc start-build technical-assistant-git --follow

          # Obtener el nombre de la nueva imagen
          IMAGE_NAME=$(oc get istag technical-assistant-git:latest -o jsonpath='{.image.dockerImageReference}')
          echo "New image: $IMAGE_NAME"

          # Guardar el nombre de la imagen en una variable de salida
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
      
      # Paso 5: Actualizar el deployment.yaml con la nueva imagen
      - name: Update Deployment Image
        run: |
          # Reemplazar la imagen en el deployment.yaml
          sed -i "s|image:.*|image: ${{ steps.build.outputs.IMAGE_NAME }}|g" deployment-technical-assistant-git.yaml    
      
      # Paso 6: Configurar Git (para hacer commit y push)
      - name: Configure Git
        run: | # Configura el usuario y el correo generico para actions en Git dentro del runner, es necesario cuando quieres hacer commits o push de cambios en un repositorio dentro del pipeline.
          git config --global user.name "GitHub Actions" 
          git config --global user.email "actions@github.com"  


      # Paso 7: Hacer commit y push de los cambios
      - name: Commit and Push Changes
        run: |
          git add deployment-technical-assistant-git.yaml
          git commit -m "Update image to ${{ steps.build.outputs.IMAGE_NAME }}"
          git push origin main